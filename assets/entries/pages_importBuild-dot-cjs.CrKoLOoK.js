import{j as e,L as o,o as s,i as a}from"../chunks/chunk-B55XmmrA.js";/* empty css                      */import"../chunks/chunk-DujD3LDN.js";/* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      *//* empty css                      */const l=[];function i(r){const t={a:"a",blockquote:"blockquote",code:"code",figure:"figure",p:"p",pre:"pre",span:"span",...r.components};return e.jsxs(e.Fragment,{children:[e.jsxs(t.p,{children:["In production, the server build (which lives at ",e.jsx(t.code,{children:"dist/server/"}),") is automagically loaded."]}),`
`,e.jsxs(t.p,{children:["But, in some (rare) situations, the trick used by Vike doesn't work. In that case, we have to manually load the files living at ",e.jsx(t.code,{children:"dist/server/"}),". We do this by importing ",e.jsx(t.code,{children:"dist/server/importBuild.cjs"}),":"]}),`
`,e.jsx(t.figure,{"data-rehype-pretty-code-figure":"",children:e.jsx(t.pre,{style:{backgroundColor:"#fff",color:"#24292e"},tabIndex:"0","data-language":"js","data-theme":"github-light",children:e.jsxs(t.code,{"data-language":"js","data-theme":"github-light",style:{display:"grid"},children:[e.jsx(t.span,{"data-line":"",children:e.jsx(t.span,{style:{color:"#6A737D"},children:"// server.js"})}),`
`,e.jsx(t.span,{"data-line":"",children:" "}),`
`,e.jsx(t.span,{"data-line":"",children:e.jsx(t.span,{style:{color:"#6A737D"},children:"// We load the server build living at dist/server/"})}),`
`,e.jsxs(t.span,{"data-line":"",children:[e.jsx(t.span,{style:{color:"#D73A49"},children:"import"}),e.jsx(t.span,{style:{color:"#032F62"},children:" './path/to/dist/server/importBuild.cjs'"})]}),`
`,e.jsx(t.span,{"data-line":"",children:" "}),`
`,e.jsx(t.span,{"data-line":"",children:e.jsx(t.span,{style:{color:"#6A737D"},children:"// Your server code, e.g. Express.js code, Vercel serverless function, Cloudflare Worker, ..."})}),`
`,e.jsxs(t.span,{"data-line":"",children:[e.jsx(t.span,{style:{color:"#D73A49"},children:"import"}),e.jsx(t.span,{style:{color:"#24292E"},children:" { renderPage } "}),e.jsx(t.span,{style:{color:"#D73A49"},children:"from"}),e.jsx(t.span,{style:{color:"#032F62"},children:" 'vike/server'"})]}),`
`,e.jsx(t.span,{"data-line":"",children:e.jsx(t.span,{style:{color:"#6A737D"},children:"// ..."})})]})})}),`
`,e.jsxs(t.p,{children:["If you use ",e.jsx(t.a,{href:"https://vitejs.dev/config/build-options.html#build-outdir",children:e.jsx(t.code,{children:"vite.config.js > build.outDir"})}),", then replace the path ",e.jsx(t.code,{children:"./path/to/dist/server/importBuild.cjs"})," with the path to your custom build directory ",e.jsx(t.code,{children:"./path/to/${build.outDir}/server/importBuild.cjs"}),"."]}),`
`,e.jsxs(t.blockquote,{children:[`
`,e.jsxs(t.p,{children:["See ",e.jsx(t.a,{href:"https://github.com/vikejs/vike/issues/403",children:"#403"})," if you're curious about the trick Vike uses to automagically import ",e.jsx(t.code,{children:"dist/server/"})," files."]}),`
`]})]})}function n(r={}){const{wrapper:t}=r.components||{};return t?e.jsx(t,{...r,children:e.jsx(i,{...r})}):i(r)}const d=Object.freeze(Object.defineProperty({__proto__:null,default:n,pageSectionsExport:l},Symbol.toStringTag,{value:"Module"})),g={isClientRuntimeLoaded:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:!0}},onBeforeRenderEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:{server:!0}}},dataEnv:{type:"computed",definedAtData:null,valueSerialized:{type:"js-serialized",value:null}},Layout:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/Layout",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:o}},hydrationCanBeAborted:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/config",fileExportPathToShowToUser:["default","hydrationCanBeAborted"]},valueSerialized:{type:"js-serialized",value:!0}},onRenderClient:{type:"standard",definedAtData:{filePathToShowToUser:"@brillout/docpress/renderer/onRenderClient",fileExportPathToShowToUser:[]},valueSerialized:{type:"pointer-import",value:s}},TopNavigation:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/+TopNavigation.tsx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:a}},Page:{type:"standard",definedAtData:{filePathToShowToUser:"/pages/importBuild-dot-cjs/+Page.mdx",fileExportPathToShowToUser:[]},valueSerialized:{type:"plus-file",exportValues:d}}};export{g as configValuesSerialized};
